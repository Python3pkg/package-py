``package`` package package
---------------------------

This is the ``package`` package package package for Python. It can be found in
the Python Package Index, here: http://pypi.python.org/pypi/package/.

``package`` is a toolset to help Python package people package their packages.
If you do not personally package Python packages, you can ignore this
``package`` package.

Installation
------------

DON'T INSTALL THIS PACKAGE (``package``)!!!

``package`` isn't meant to be installed like normal Python packages. It is
meant to be copied and distributed as a part of other Python packages.

The best thing to do is to to ``git clone`` it from GitHub, and put it beside
the other packages that you package for Python::

    git clone git://github.com/ingydotnet/package-py.git

The second best thing to do is get the latest ``package-#.#.#.tar.gz`` from
http://pypi.python.org/pypi/package/, untar it and rename the directory to
``package-py``.

Then follow the instructions given below.

WTF?
----

Confused? So was I...

I like to write a lot of modules and distribute them as packages, but
when I started doing this in Python, I ran into a wall of
setup/installer bugs, bad workarounds and community disagreement about
what the best way to go was. I decided to fix this in a way that makes
all programmers be able to install my Python packages (and their
prerequisite packages), regardless of their current Python knowledge or
working environment.

The solution is simple. Just add helper tools in a subdirectory that
gets included in every Python package you release.

It's a simple trade of a little extra storage space for functionality,
package-author-sanity and world peace. :)

Design Goals
------------

These are some of the things I was concerned with when I started this project:

* Make my Python packages installable by anyone.
* Allow my Python packages to depend on other packages.
* Put as little extra burden on the user as possible.
* Never leave the user uninformed and screaming.
* Make setup.py files be autogenerated from simple yaml files.
* Don't let this project paint its users into yet another dependency corner.
* Provide a simple Makefile for automating related tasks.
* Provide support for running unittests with ``make test``.
* Keep the bloat of using ``package`` to a minimum.

Usage
-----

To use this Python package packaging technique, follow these simple steps:

1) ``> cd your/src/dir/``

   In other words, just go to the directory where you want to put this
   ``package`` package's repository. Putting it next to your other Python
   package source code repositories is what I am suggesting here...

2) ``> git clone git://github.com/ingydotnet/package-py.git``

   Unless, of course, you already have ``package-py``. Then maybe you should
   ``git pull`` it to get the latest code.

3) ``> mkdir newproject``

4) ``> cd newproject``

5) ``> make -f ../package-py/Makefile.mk setup``

   This will set up the files you need for a new project. It will install a
   ``Makefile``, a new ``setup.py`` file, and create the ``package/``
   subdirectory in your project directory.

6) Edit ``package/info.yaml`` with all the information about your package.

8) ``> make info``

   This will create the package/info.py class from your configuration.

7) ``> make help``

   At this point everything should be set up for you to use just like any
   other setup.py.

   From here on out, you are encouraged (but not required) to use the
   Makefile. Run ``make help`` to see all the options available to you.

Development Status
------------------

This is very alpha stuff.

I am using this software for all my projects on PyPi. I do most of my
development on Mac OS X, and Linux using Python 2.6.5.

I would love to talk to you about your experience in using this software. Feel
free to hunt me down on the net...

Author
------

This blasphemous atrocity was brought to you by Ingy dot Net. Yes, the same
guy who ruined Perl. There was nothing there left there for him to pillage, so
he has moved on to your neighborhood. Be afraid.

Copyright
---------

``package`` is Copyright (c) 2010, Ingy dot Net

``package`` is licensed under the New BSD License. See the LICENSE file.
